## Tweenity Graph Editor - UI Documentation

### Overview
The **Tweenity Graph Editor** is a custom Unity Editor Window designed to manage and visualize node-based structures. The system uses a modular and extensible **Model-View-Controller (MVC)** architecture to promote separation of concerns and maintainability.

### Architecture Pattern: Updated Approach
As of 2025-03-25, the project enforces a strict separation between UI (View), data (Model), and logic (Controller):

- **Views** are now _purely visual_ and delegate all user interactions to the `GraphController`.
- The **Controller** receives and handles all logic updates from the views and updates the model accordingly.
- The **Model** only holds data and exposes it through structured classes.

This ensures that the system is robust, testable, and scalable.

---

### Project Structure

#### 1. **Models** (`Models/`)
- **GraphModel.cs**: Holds the full node graph.
- **Node Models (`Models/Nodes/`)**: Specialized node classes like `StartNodeModel`, `DialogueNodeModel`, etc.
- **Responsibilities**:
  - Contain and validate node data.
  - Enforce structural constraints (e.g., only one `StartNode`).
  - Work with `GraphParser` for `.twee` import/export.

#### 2. **Controllers** (`Controllers/`)
- **GraphController.cs**:
  - Manages the entire application state.
  - Adds/removes nodes and triggers rendering in `GraphView`.
  - Handles events from the Toolbar, GraphView, and RightPanel views.
  - Applies all changes made in the UI back into the model.

#### 3. **Views** (`Views/`)

##### **Toolbar (TweenityToolbar.cs)**
- Hosts UI actions: Save, Export, Import, View tools, Add node.
- Delegates all actions to the `GraphController`.

##### **Left Panel (TweenityLeftPanel.cs)**
- Search functionality and node hierarchy (planned).
- Interactions are sent to the controller.

##### **Graph View (TweenityGraphView.cs)**
- Renders the current graph visually.
- Purely a display surface — all interaction (node selection, dragging) notifies the `GraphController`.

##### **Right Panel (TweenityRightPanel.cs)**
- Updates when a node is selected.
- Shows the appropriate node details view based on node type.
- Each detail view is controller-powered (e.g., `DialogueView`, `ReminderView`, etc.).
- No logic is handled here — all field changes notify the controller.

##### **Bottom Toolbar (TweenityBottomToolbar.cs)**
- Exposes debugging tools.
- Buttons notify the controller for deeper functionality.

---

### Key Concepts & Interaction Flow

- Views (UI) never modify the model directly.
- All actions (e.g., adding nodes, changing text fields) go through `GraphController`.
- Right panel views receive both the node model and the controller as parameters.
- This allows updates to propagate consistently through the system.

---

### Development Notes

- Consistent **MVC enforcement** across the entire project.
- Controller is the **only authority** for modifying the graph.
- Views are modular, composable, and logic-free.
- Great foundation for adding undo/redo, node linking, or multiplayer collaboration later.

---

_Last updated: 2025-03-25_
