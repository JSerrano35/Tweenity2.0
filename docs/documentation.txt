## Tweenity Graph Editor - UI Documentation

### Overview
The **Tweenity Graph Editor** is a custom Unity Editor Window designed to manage and visualize node-based structures within the Unity Editor. The interface has been modularized into distinct components for maintainability and ease of extension.

### Project Structure
The project follows the **Model-View-Controller (MVC) architecture** to separate concerns and ensure scalability.

#### 1. **Models** (`Models/`)
- **GraphModel.cs**: Manages the overall graph, including nodes and connections.
- **Node Models (`Models/Nodes/`)**: Contains specific node implementations such as `StartNode`, `EndNode`, `DialogueNode`, etc.
- **Responsibilities**:
  - Stores node data and relationships.
  - Enforces constraints (e.g., only one `StartNode` allowed).
  - Provides serialization support (future expansion).

#### 2. **Controllers** (`Controllers/`)
- **GraphController.cs**: Manages interactions between the model and the view.
- **Responsibilities**:
  - Adds, removes, and retrieves nodes.
  - Updates the view when the model changes.
  - Ensures business logic is enforced (e.g., node connection validation).

#### 3. **Views** (`Views/`)
The UI is divided into multiple sections for modularity and readability.

##### **Toolbar (TweenityToolbar.cs)**
- Provides essential file operations and view settings.
- Buttons include:
  - **File Menu** (Save, Export, Import)
  - **View Menu** (Toggle Grid, Zoom In/Out, Reset View)
  - **Help Button** (Placeholder for documentation/help support)
  - **Add Node Button** (Future functionality for adding nodes)

##### **Left Panel (TweenityLeftPanel.cs)**
- Contains tools for managing the hierarchy and searching nodes.
- Includes:
  - **Search Bar** (Filter nodes by name)
  - **Hierarchy View** (Displays node structure)

##### **Graph View (TweenityGraphView.cs)**
- The core visual representation of nodes and their relationships.
- Allows interaction with nodes and connections (future development planned).
- Works closely with `GraphController` to synchronize changes.

##### **Right Panel (TweenityRightPanel.cs)**
- Displays details and properties of the selected node.
- Dynamically updates based on node type.
- Contains:
  - **Node Type Dropdown** (Allows selection of node category)
  - **Title & Description Fields**
  - **Notes Section**
  - **Expected User Actions** (For interactive nodes)
  - **Simulator Actions** (For automation & training sequences)
  - **Timeout & Reminder Settings** (For timed events)
  - **Audio & Dialogue Settings** (Visible only for dialogue nodes)
  - **Connected Nodes List**

##### **Bottom Toolbar (TweenityBottomToolbar.cs)**
- Displays debugging and selection information.
- Includes:
  - **Debugging Button** (Logs debugging information)
  - **Current Selection Button** (Shows details of the currently selected node)

### Functionality & Behavior
- The **Toolbar** handles general actions (file management, view controls, node addition).
- The **Left Panel** organizes nodes in a hierarchical manner and allows searching.
- The **Graph View** is the interactive space where users manipulate nodes.
- The **Right Panel** updates dynamically based on the selected node type.
- The **Bottom Toolbar** is used for debugging and tracking selections.

### Development Notes
- The **Model** layer ensures data integrity and enforces rules.
- The **Controller** acts as the intermediary between the Model and View.
- The **View** dynamically updates based on user interactions.
- Future enhancements may include **drag-and-drop connections**, **graph serialization**, and **customizable themes**.

This document provides a structured overview of the Tweenity Graph Editorâ€™s UI components, responsibilities, and functionality as of the current implementation.
